#! /usr/bin/env python
#-******************************************************************************
#
# Copyright (c) 2012-2013,
#  Sony Pictures Imageworks Inc. and
#  Industrial Light & Magic, a division of Lucasfilm Entertainment Company Ltd.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# *       Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# *       Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
# *       Neither the name of Sony Pictures Imageworks, nor
# Industrial Light & Magic, nor the names of their contributors may be used
# to endorse or promote products derived from this software without specific
# prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#-******************************************************************************

__usage__ = """
abcview [file1 .. fileN] [OPTIONS]
"""

__doc__ = """
AbcView is a graphical PyQt-based Alembic inspection and visualization 
tool. It offers a number of widgets to help you inspect and visualize 
your Alembic data, as well as assemble hierarchical scenes.

More information-
http://docs.alembic.io/python/abcview.html
"""

import os
import sys
import glob
import logging
import argparse
import traceback

from PyQt4 import QtCore
from PyQt4 import QtGui

from abcview import App, AbcView, log
from abcview.io import Mode

__usage__ = """
abcview [file1 .. fileN] [OPTIONS]
"""

__doc__ = """
What's new:

- built-in GL viewer
- support for cameras
- frame selected object 
- playback with time slider
- multiple GL modes + bounds
- save layout and session
- console bug fixes

More information:
http://docs.alembic.io/python/abcview.html
"""

"""
TODO:

- GL picking in viewer
- highlight object selection in viewer
- better session cycle checking on load
- more stats (poly count, mem usage)
- support for lights and materials
- draggable, pop-out widgets
- share state between processes / remote viewing
- save split window layouts
- support object paths in args, auto-frame on object
- unit tests
"""

def create_parser():
    parser = argparse.ArgumentParser(description=__usage__)
    parser.add_argument('filepath', type=str, nargs='*',
            help='File to open.')

    parser.add_argument('-f', '--frame', default=None, type=int,
            help='Frame to load in viewer.')
    parser.add_argument('--first', default=None, type=int,
            help='Set viewer first frame value.')
    parser.add_argument('--last', default=None, type=int,
            help='Set viewer last frame value.')
    parser.add_argument('--mode', default=None, type=int,
            help="""Default display mode:
                   (0: OFF,
                    1: BOUNDS,
                    2: POINTS,
                    3: LINES,
                    4: SMOOTH)
            """)
    parser.add_argument('--bounds', action='store_true',
            help='Force scene bounds display mode.')
    parser.add_argument('--cinema', action='store_true',
            help='Cinema display settings.')
    parser.add_argument('--reset', action='store_true',
            help='Reset settings.')
    parser.add_argument('--verbose', action='store_true',
            help='Verbose output.')
    parser.add_argument('--script', 
            help='Load and execute Python script.')
    return parser

def main():
    """
    Main.
    """
    # get arguments
    parser = create_parser()
    args = parser.parse_args()

    # create application and widget
    app = App(sys.argv)
    win = AbcView()
    
    # verbosity
    if args.verbose:
        log.setLevel(logging.DEBUG)

    # settings
    if args.reset:
        win.reset_settings()
    elif args.cinema:
        win.cinema_settings()
    else:
        win.load_settings()
 
    # show widgets (Qt oddity this is done before event loop)
    win.show()
    win.raise_()

    # force scene bounds
    if args.bounds:
        win.set_default_mode(Mode.OFF)
        win.viewer.camera.mode = Mode.OFF
        win.viewer.camera.draw_bounds = 1

    # defer file loading until event loop starts
    win.set_load_list(args.filepath)

    # set frame range overrides
    if args.frame is not None:
        win.set_current_frame(args.frame)
    if args.first is not None:
        win.set_first_frame(args.first)
    if args.last is not None:
        win.set_last_frame(args.last)

    # execute some python
    if args.script:
        win.load_script(args.script)

    # start event loop
    return app.exec_()

if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception, e:
        traceback.print_exc()
    except KeyboardInterrupt:
        log.info('stopping...')
        sys.exit(1)
