#! /usr/bin/env python
#-******************************************************************************
#
# Copyright (c) 2012-2013,
#  Sony Pictures Imageworks Inc. and
#  Industrial Light & Magic, a division of Lucasfilm Entertainment Company Ltd.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# *       Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# *       Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
# *       Neither the name of Sony Pictures Imageworks, nor
# Industrial Light & Magic, nor the names of their contributors may be used
# to endorse or promote products derived from this software without specific
# prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#-******************************************************************************

__usage__ = """
abcview [file1 .. fileN] [OPTIONS]
"""

__doc__ = """
AbcView is a graphical PyQt-based Alembic inspection and visualization 
tool. It offers a number of widgets to help you inspect and visualize 
your Alembic data, as well as assemble hierarchical scenes.

More information-
http://docs.alembic.io/python/abcview.html
"""

import os
import sys
import argparse
import traceback

from abcview import config, create_app

def create_parser():
    parser = argparse.ArgumentParser(description=__usage__)
    parser.add_argument('filepath', type=str, nargs='*',
            help='File to open.')

    parser.add_argument('-f', '--frame', default=None, type=int,
            help='Frame to load in viewer.')
    parser.add_argument('--first', default=None, type=int,
            help='Set viewer first frame value.')
    parser.add_argument('--last', default=None, type=int,
            help='Set viewer last frame value.')
    parser.add_argument('--bounds', action='store_true',
            help='Force scene bounds display mode.')
    parser.add_argument('--review', action='store_true',
            help='Use review display settings.')
    parser.add_argument('--reset', action='store_true',
            help='Reset settings.')
    parser.add_argument('--verbose', action='store_true',
            help='Verbose output.')
    parser.add_argument('--script', 
            help='Load and execute Python script.')
    return parser

def version_check():
    """
    Validates that alembic and alembicgl can be imported and
    that they meet the minimum requires versions.
    """
    try:
        import imath
        import alembic
        import alembicgl
    except ImportError, e:
        print str(e)
        return 0
    version = alembic.Abc.GetLibraryVersionShort()
    major, minor, maint = version.split('.')
    if int(major) >= 1 and int(minor) >= 3:
        return 1
    else:
        return 0

if __name__ == "__main__":
    parser = create_parser()
    args = parser.parse_args()

    if not version_check():
        print "%s %s requires Alembic 1.3.0 or greater" \
                % (config.__prog__, config.__version__)
        sys.exit(1)

    try:
        sys.exit(create_app(args.filepath,
            args.first, args.last, args.frame,
            args.script, args.bounds, args.review, 
            args.reset, args.verbose))
    except Exception, e:
        traceback.print_exc()
    except KeyboardInterrupt:
        log.info('stopping...')
        sys.exit(1)
